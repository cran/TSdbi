# Before starting R you need to set user/passwd/host in ~/.my.cnf
#  and you must have 

cat("Example creating tables for different time series.\n")

# Note: The TS* packages contain a method "dropTStable" to work around the
#  problem that different db engines treat capitalized table names differently.
# e.g. MySQL uses table name Meta while Posgresql converts to meta.
# However, these examples are need to work when that method is not available
# so some duplication is used here to remove existing tables. 

# Set up Metadata table  Meta.

if(dbExistsTable(con, "Meta")) dbRemoveTable(con, "Meta")
if(dbExistsTable(con, "meta")) dbRemoveTable(con, "meta")

dbGetQuery(con, "create table Meta (
   id          VARCHAR(40) NOT NULL,
   tbl         CHAR(1), 
   refperiod   VARCHAR(10) default NULL,
   description   TEXT,
   documentation     TEXT
   );")
dbGetQuery(con, "CREATE UNIQUE INDEX Metaindex_id ON Meta (id);")
dbGetQuery(con, "CREATE INDEX Metaindex_tbl ON Meta (tbl);")

# Set up annual table  A.

if(dbExistsTable(con, "A")) dbRemoveTable(con, "A")
if(dbExistsTable(con, "a")) dbRemoveTable(con, "a")

dbGetQuery(con, "create table A (
   id	      VARCHAR(40),
   year	      INT,
   v    double precision DEFAULT  NULL
   );")
dbGetQuery(con, "CREATE INDEX Aindex_id     ON A (id);")
dbGetQuery(con, "CREATE INDEX Aindex_year   ON A (year);")

# Set up business table  B .

if(dbExistsTable(con, "B")) dbRemoveTable(con, "B")
if(dbExistsTable(con, "b")) dbRemoveTable(con, "b")

dbGetQuery(con, "create table B (
   id	      VARCHAR(40),
   date	      DATE,
   period     INT,
   v    double precision DEFAULT  NULL
   );")
dbGetQuery(con, "CREATE INDEX Bindex_id     ON B (id);")
dbGetQuery(con, "CREATE INDEX Bindex_date   ON B (date);")
dbGetQuery(con, "CREATE INDEX Bindex_period ON B (period);")


# Set up daily table  D .

if(dbExistsTable(con, "D")) dbRemoveTable(con, "D")
if(dbExistsTable(con, "d")) dbRemoveTable(con, "d")

dbGetQuery(con, "create table D (
   id	      VARCHAR(40),
   date	      DATE,
   period     INT,
   v    double precision DEFAULT  NULL
   );")
dbGetQuery(con, "CREATE INDEX Dindex_id     ON D (id);")
dbGetQuery(con, "CREATE INDEX Dindex_date   ON D (date);")
dbGetQuery(con, "CREATE INDEX Dindex_period ON D (period);")


# Set up monthly table  M.

if(dbExistsTable(con, "M")) dbRemoveTable(con, "M")
if(dbExistsTable(con, "m")) dbRemoveTable(con, "m")

dbGetQuery(con, "create table M (
   id	      VARCHAR(40),
   year	      INT,
   period     INT,  
   v    double precision DEFAULT  NULL
   );")
dbGetQuery(con, "CREATE INDEX Mindex_id     ON M (id);")
dbGetQuery(con, "CREATE INDEX Mindex_year   ON M (year);")
dbGetQuery(con, "CREATE INDEX Mindex_period ON M (period);")

# Set up minutely table  U .

if(dbExistsTable(con, "U")) dbRemoveTable(con, "U")
if(dbExistsTable(con, "u")) dbRemoveTable(con, "u")

 # tz not tested yet. Not sure about period.  
 dbGetQuery(con, "create table U (
   id	      VARCHAR(40),
   date	      TIMESTAMP,
   tz         VARCHAR(4),    
   period     INT,         
   v    double precision DEFAULT  NULL
   );")
dbGetQuery(con, "CREATE INDEX Uindex_id     ON U (id);")
dbGetQuery(con, "CREATE INDEX Uindex_date   ON U (date);")
dbGetQuery(con, "CREATE INDEX Uindex_period ON U (period);")


# Set up quaterly table  Q.

if(dbExistsTable(con, "Q")) dbRemoveTable(con, "Q")
if(dbExistsTable(con, "q")) dbRemoveTable(con, "q")

dbGetQuery(con, "create table Q (
   id	      VARCHAR(40),
   year	      INT,
   period     INT,  
   v    double precision DEFAULT  NULL
   );")
dbGetQuery(con, "CREATE INDEX Qindex_id     ON Q (id);")
dbGetQuery(con, "CREATE INDEX Qindex_year   ON Q (year);")
dbGetQuery(con, "CREATE INDEX Qindex_period ON Q (period);")

# Set up semiannual table  S .

if(dbExistsTable(con, "S")) dbRemoveTable(con, "S")
if(dbExistsTable(con, "s")) dbRemoveTable(con, "s")
 
dbGetQuery(con, "create table S (
   id	      VARCHAR(40),
   year	      INT,
   period     INT,  
   v    double precision DEFAULT  NULL
   );")
dbGetQuery(con, "CREATE INDEX Sindex_id     ON S (id);")
dbGetQuery(con, "CREATE INDEX Sindex_year   ON S (year);")
dbGetQuery(con, "CREATE INDEX Sindex_period ON S (period);")

# Set up weekly table  W .

if(dbExistsTable(con, "W")) dbRemoveTable(con, "W")
if(dbExistsTable(con, "w")) dbRemoveTable(con, "w")

dbGetQuery(con, "create table W (
   id	      VARCHAR(40),
   date	      DATE,
   period     INT,  
   v    double precision DEFAULT  NULL
   );")
dbGetQuery(con, "CREATE INDEX Windex_id     ON W (id);")
dbGetQuery(con, "CREATE INDEX Windex_date   ON W (date);")
dbGetQuery(con, "CREATE INDEX Windex_period ON W (period);")

# Set up irregular date table  I .

if(dbExistsTable(con, "I")) dbRemoveTable(con, "I")
if(dbExistsTable(con, "i")) dbRemoveTable(con, "i")

dbGetQuery(con, "create table I (
   id	      VARCHAR(40),
   date	      DATE,
   v    double precision DEFAULT  NULL
   );")
dbGetQuery(con, "CREATE INDEX Iindex_id     ON I (id);")
dbGetQuery(con, "CREATE INDEX Iindex_date   ON I (date);")



# Set up irregular date-time table  T .
# IT WOULD BE NICE TO HAVE TZ HERE TOO

if(dbExistsTable(con, "T")) dbRemoveTable(con, "T")
if(dbExistsTable(con, "t")) dbRemoveTable(con, "t")

dbGetQuery(con, "create table T (
   id    VARCHAR(40),
   date  TIMESTAMP,
   v     double precision DEFAULT  NULL
   );")
dbGetQuery(con, "CREATE INDEX Tindex_id   ON T (id);")
dbGetQuery(con, "CREATE INDEX Tindex_date ON T (date);")

cat("   tables created:\n")
print(dbListTables(con))

#  This is generic sql way to get table info. (eg. table A )
#   but it requires read privileges on INFORMATION_SCHEMA.Columns
#   which the user may not have.

if( "SQLiteConnection" != class(con)) { #SQLite does not seem to support this
  z <- try(
  dbGetQuery(con, "SELECT COLUMN_NAME, COLUMN_DEFAULT, COLLATION_NAME, DATA_TYPE,
         CHARACTER_SET_NAME, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION
            FROM INFORMATION_SCHEMA.Columns WHERE table_name='A' ;"), silent=TRUE )
  if(inherits(z, "try-error")) cat(
    "INFORMATION_SCHEMA query problem. (User may not have permission.)\n")
  else print(z)
 }
